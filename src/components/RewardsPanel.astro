---
import { achievements, rewards } from '../data/rewards';
---

<div class="fixed bottom-4 right-4 z-20">
  <button
    id="rewardsToggle"
    class="bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-full p-3 shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1"
  >
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3-.895 3-2-1.343-2-3-2zM17 16v2a2 2 0 01-2 2H9a2 2 0 01-2-2v-2"></path>
    </svg>
  </button>

  <div
    id="rewardsPanel"
    class="hidden absolute bottom-16 right-0 w-80 bg-white rounded-xl shadow-xl p-4 transform transition-all duration-300"
  >
    <div class="text-center mb-4">
      <h3 class="font-display text-xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-purple-600 to-pink-600">Your Style Points</h3>
      <p class="text-2xl font-bold" id="pointsDisplay">0</p>
    </div>

    <div class="space-y-4">
      <div>
        <h4 class="font-display text-lg font-semibold mb-2">Achievements</h4>
        <div class="space-y-2">
          {achievements.map(achievement => (
            <div class="flex items-center bg-gray-50 rounded-lg p-2 achievement-item" data-id={achievement.id}>
              <span class="text-2xl mr-2">{achievement.icon}</span>
              <div class="flex-1">
                <p class="text-sm font-medium">{achievement.title}</p>
                <p class="text-xs text-gray-600">{achievement.description}</p>
              </div>
              <span class="text-xs font-semibold text-purple-600">+{achievement.points}</span>
            </div>
          ))}
        </div>
      </div>

      <div>
        <h4 class="font-display text-lg font-semibold mb-2">Available Rewards</h4>
        <div class="space-y-2">
          {rewards.map(reward => (
            <div class="bg-gray-50 rounded-lg p-3">
              <div class="flex justify-between items-center mb-2">
                <h5 class="font-medium">{reward.title}</h5>
                <span class="text-sm font-semibold text-purple-600">{reward.pointsCost} pts</span>
              </div>
              <p class="text-xs text-gray-600">{reward.description}</p>
              <button
                class="mt-2 w-full bg-gradient-to-r from-purple-600 to-pink-600 text-white text-sm rounded-lg py-1 opacity-50 cursor-not-allowed reward-btn"
                data-id={reward.id}
                data-cost={reward.pointsCost}
                disabled
              >
                Redeem Reward
              </button>
            </div>
          ))}
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  let points = parseInt(localStorage.getItem('stylePoints') || '0');
  const pointsDisplay = document.getElementById('pointsDisplay');
  const rewardsToggle = document.getElementById('rewardsToggle');
  const rewardsPanel = document.getElementById('rewardsPanel');
  const achievementItems = document.querySelectorAll('.achievement-item');
  const rewardBtns = document.querySelectorAll('.reward-btn');

  // Update points display
  function updatePoints() {
    if (pointsDisplay) {
      pointsDisplay.textContent = points.toString();
      localStorage.setItem('stylePoints', points.toString());
      
      // Update reward buttons
      rewardBtns.forEach(btn => {
        const cost = parseInt(btn.getAttribute('data-cost') || '0');
        if (points >= cost) {
          btn.classList.remove('opacity-50', 'cursor-not-allowed');
          btn.removeAttribute('disabled');
        }
      });
    }
  }

  // Toggle rewards panel
  rewardsToggle?.addEventListener('click', () => {
    rewardsPanel?.classList.toggle('hidden');
  });

  // Handle achievements
  achievementItems.forEach(item => {
    const id = item.getAttribute('data-id');
    const completed = localStorage.getItem(`achievement_${id}`);
    
    if (completed) {
      item.classList.add('opacity-50');
    }
  });

  // First visit achievement
  if (!localStorage.getItem('achievement_first-visit')) {
    points += 100;
    localStorage.setItem('achievement_first-visit', 'true');
    updatePoints();
  }

  // Product explorer achievement
  let viewedProducts = JSON.parse(localStorage.getItem('viewedProducts') || '[]');
  if (window.location.pathname.startsWith('/product/')) {
    const productId = window.location.pathname.split('/').pop();
    if (productId && !viewedProducts.includes(productId)) {
      viewedProducts.push(productId);
      localStorage.setItem('viewedProducts', JSON.stringify(viewedProducts));
      
      if (viewedProducts.length === 3 && !localStorage.getItem('achievement_product-explorer')) {
        points += 150;
        localStorage.setItem('achievement_product-explorer', 'true');
        updatePoints();
      }
    }
  }

  // Initialize points display
  updatePoints();
</script>